# Import the AWS PowerShell Module
Import-Module AWSPowerShell

# Set AWS Region and Credentials
$accessKey = "YourAccessKey"
$secretKey = "YourSecretKey"
$region = "af-south-1"
Set-AWSCredential -AccessKey $accessKey -SecretKey $secretKey -StoreAs "SessionProfile"
Set-DefaultAWSRegion -Region $region

# Function to retrieve tag conditions from the IAM policy
function Get-TagConditionsFromPolicy ($iamUserName) {
    # Retrieve user policies
    $userPolicies = Get-IAMUserPolicyList -UserName $iamUserName -ProfileName "SessionProfile"
    $tags = @{}

    foreach ($policyName in $userPolicies.PolicyNames) {
        $policyDocument = Get-IAMUserPolicy -UserName $iamUserName -PolicyName $policyName -ProfileName "SessionProfile"
        if ($policyDocument.PolicyDocument.Contains("ec2:ResourceTag/AccessGroup")) {
            $accessGroup = $policyDocument.PolicyDocument.Statement.Condition."StringEquals"."ec2:ResourceTag/AccessGroup"
            $tags["AccessGroup"] = $accessGroup
        }
        if ($policyDocument.PolicyDocument.Contains("ec2:ResourceTag/Partner")) {
            $partnerTag = $policyDocument.PolicyDocument.Statement.Condition."StringEquals"."ec2:ResourceTag/Partner"
            $tags["Partner"] = $partnerTag
        }
    }

    return $tags
}

# Function to get EC2 instances by matching tags
function Get-EC2InstancesByTags ($region, $tags) {
    $instances = Get-EC2Instance -Region $region -ProfileName "SessionProfile" | Where-Object {
        $instanceTags = $_.Instances.Tags | ForEach-Object { @{ $_.Key = $_.Value } }
        $tags.AllKeys | ForEach-Object { $instanceTags[$_] -eq $tags[$_] }
    }
    return $instances
}

# Function to generate an RDP file
function Generate-RDPFile ($instanceName, $localPort) {
    $rdpFileContent = @"
full address:s:localhost:$localPort
prompt for credentials:i:1
administrative session:i:1
screen mode id:i:2
"@
    $rdpFilePath = "$(Get-Location)\SSM_RDP_$($instanceName).rdp"
    Set-Content -Path $rdpFilePath -Value $rdpFileContent
    Write-Host "RDP file generated at $rdpFilePath for instance: $instanceName"
}

# Function to start the SSM session with port forwarding for RDP
function Start-SSMSession ($instanceId, $region, $localPort) {
    $sessionCommand = "aws ssm start-session --target $instanceId --document-name AWS-StartPortForwardingSession --parameters portNumber=3389,localPortNumber=$localPort --region $region"
    Start-Process powershell -NoNewWindow -ArgumentList "-Command $sessionCommand"
    Write-Host "SSM session started for instance: $instanceId on local port $localPort"
}

# Main Execution
$iamUser = (Get-IAMUser -ProfileName "SessionProfile").UserName
$tags = Get-TagConditionsFromPolicy -iamUserName $iamUser

if ($tags.Count -eq 0) {
    Write-Host "No tag conditions found for IAM user $iamUser"
    exit
}

$instances = Get-EC2InstancesByTags -region $region -tags $tags
if ($instances.Count -eq 0) {
    Write-Host "No EC2 instances found matching the tags specified in the IAM policy."
    exit
}

# Loop through instances, generate RDP files, and start SSM sessions
$startingPort = 9999
foreach ($instance in $instances) {
    $instanceId = $instance.Instances.InstanceId
    $instanceName = ($instance.Instances.Tags | Where-Object { $_.Key -eq 'Name' }).Value

    Write-Host "Instance Name: $instanceName - Instance ID: $instanceId"

    Generate-RDPFile -instanceName $instanceName -localPort $startingPort
    Start-SSMSession -instanceId $instanceId -region $region -localPort $startingPort

    $startingPort++
}

Write-Host "All specified RDP files generated and SSM sessions initiated."
