import requests
import boto3
from botocore.exceptions import NoCredentialsError, PartialCredentialsError

def stream_to_s3_multipart(url, s3_bucket, s3_key, chunk_size=1024*1024*50):
    """
    Streams a file from a given URL directly to an S3 bucket using multipart upload.

    :param url: URL of the file to be streamed and uploaded.
    :param s3_bucket: Name of the S3 bucket.
    :param s3_key: S3 object key (path) where the file will be uploaded.
    :param chunk_size: Size of each chunk to be streamed in bytes. Default is 50MB.
    :return: Tuple containing the S3 bucket and key.
    """
    s3_client = boto3.client('s3')

    # Initiate multipart upload
    try:
        multipart_upload = s3_client.create_multipart_upload(Bucket=s3_bucket, Key=s3_key)
        upload_id = multipart_upload['UploadId']
        print(f"Started multipart upload with ID: {upload_id}")
        
        # To store the parts and their corresponding ETags
        parts = []
        part_number = 1

        # Open a streaming connection to the URL
        with requests.get(url, stream=True) as response:
            response.raise_for_status()  # Check for HTTP errors

            for chunk in response.iter_content(chunk_size=chunk_size):
                if chunk:  # Only upload non-empty chunks
                    print(f"Uploading part {part_number}...")

                    # Upload part to S3
                    part = s3_client.upload_part(
                        Bucket=s3_bucket,
                        Key=s3_key,
                        PartNumber=part_number,
                        UploadId=upload_id,
                        Body=chunk
                    )

                    # Append part information (PartNumber and ETag)
                    parts.append({
                        'ETag': part['ETag'],
                        'PartNumber': part_number
                    })

                    part_number += 1

        # Complete multipart upload
        s3_client.complete_multipart_upload(
            Bucket=s3_bucket,
            Key=s3_key,
            UploadId=upload_id,
            MultipartUpload={'Parts': parts}
        )
        print(f"Multipart upload completed for {s3_key}")
        return s3_bucket, s3_key

    except (requests.RequestException, NoCredentialsError, PartialCredentialsError) as e:
        print(f"Error: {e}")
        if 'upload_id' in locals():
            s3_client.abort_multipart_upload(Bucket=s3_bucket, Key=s3_key, UploadId=upload_id)
            print(f"Aborted multipart upload for {s3_key}")
        return None

# Example usage
bucket, key = stream_to_s3_multipart(
    url="https://example.com/path/to/ova/file.ova",  # Replace with the actual URL
    s3_bucket="your-s3-bucket-name",  # Replace with your S3 bucket
    s3_key="uploads/file.ova"  # Replace with your S3 object key (file path in bucket)
)

if bucket and key:
    print(f"File successfully uploaded to s3://{bucket}/{key}")
