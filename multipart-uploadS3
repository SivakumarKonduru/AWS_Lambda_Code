import boto3
import requests
import hashlib

def download_and_upload_ova(url, bucket_name, s3_key):
    # Initialize S3 client
    s3_client = boto3.client('s3')

    # Hashing object to ensure integrity
    sha256_hash = hashlib.sha256()

    try:
        # Stream the download from the provided URL
        with requests.get(url, stream=True) as response:
            response.raise_for_status()

            # Using a streaming upload to S3 directly
            with response.raw as data_stream:
                # Calculate hash while reading and uploading in one go
                for chunk in iter(lambda: data_stream.read(1024 * 1024), b''):  # Read in 1MB chunks
                    sha256_hash.update(chunk)

                # Uploading the file directly from the stream using `put_object`
                data_stream.seek(0)  # Rewind the stream to the beginning
                s3_client.put_object(Bucket=bucket_name, Key=s3_key, Body=data_stream)

    except requests.exceptions.RequestException as e:
        print(f"HTTP request failed: {e}")
        return None

    except boto3.exceptions.Boto3Error as e:
        print(f"Error uploading to S3: {e}")
        return None

    # After upload is complete, print the hash
    print(f"SHA-256 Hash of OVA: {sha256_hash.hexdigest()}")

    return bucket_name, s3_key


# Example usage
url = "https://example.com/path-to-large-ova-file.ova"
bucket_name = "your-s3-bucket"
s3_key = "path-in-s3/large-ova-file.ova"

bucket, key = download_and_upload_ova(url, bucket_name, s3_key)
print(f"File uploaded to S3: s3://{bucket}/{key}")
