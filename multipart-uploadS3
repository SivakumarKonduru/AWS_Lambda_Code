import threading
import boto3
import requests
import sys
from boto3.s3.transfer import TransferConfig

# Function to download the OVA file from a URL and upload it directly to S3 using multipart upload
def multi_part_upload_with_s3_from_url(bucket_name, s3_key, download_url):
    # Get the response and total size of the file from the URL
    response = requests.get(download_url, stream=True)
    response.raise_for_status()  # Ensure there is no error in downloading the file
    total_size = int(response.headers.get('content-length', 0))  # Get the total size of the file

    # Calculate chunk size dynamically, minimum is set to 50 MB
    max_parts = 10000
    min_chunk_size = 50 * 1024 * 1024  # 50 MB in bytes
    chunk_size = max(min_chunk_size, total_size // max_parts)  # Dynamic chunk size

    # Multipart upload configuration
    config = TransferConfig(
        multipart_threshold=chunk_size,
        multipart_chunksize=chunk_size,
        max_concurrency=10,  # Number of threads to upload parts concurrently
        use_threads=True
    )

    # S3 upload
    s3 = boto3.resource('s3')
    file_obj = response.raw

    # Progress tracking
    callback = ProgressPercentage(total_size)

    # Perform the upload directly from the response stream
    s3.meta.client.upload_fileobj(
        file_obj,
        bucket_name,
        s3_key,
        Config=config,
        Callback=callback,
        ExtraArgs={'ACL': 'public-read', 'ContentType': 'application/octet-stream'}
    )

    # Return bucket name and s3 key on successful upload
    return bucket_name, s3_key

# Progress bar class for tracking the upload progress
class ProgressPercentage(object):
    def __init__(self, total_size):
        self._size = float(total_size)
        self._seen_so_far = 0
        self._lock = threading.Lock()

    # Function that gets called as the file uploads
    def __call__(self, bytes_amount):
        with self._lock:
            self._seen_so_far += bytes_amount
            percentage = (self._seen_so_far / self._size) * 100
            sys.stdout.write(
                "\rUploaded %s / %s (%.2f%%)" % (
                    self._seen_so_far, self._size, percentage))
            sys.stdout.flush()

# Example usage
if __name__ == "__main__":
    # S3 bucket name and S3 key (file name in S3)
    bucket_name = 'your-s3-bucket-name'
    s3_key = 'path/in/s3/largefile.ova'  # Change this to your desired S3 key

    # OVA file download URL
    download_url = 'https://example.com/path-to-your-ova-file.ova'

    # Call the function to download and upload the file
    uploaded_bucket, uploaded_key = multi_part_upload_with_s3_from_url(bucket_name, s3_key, download_url)

    # Check if the upload was successful
    if uploaded_bucket and uploaded_key:
        print(f"\nFile successfully uploaded to bucket: {uploaded_bucket}, key: {uploaded_key}")
    else:
        print("\nFile upload failed.")
