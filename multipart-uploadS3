import requests
import boto3
import math
import time
from botocore.exceptions import NoCredentialsError, PartialCredentialsError

def download_and_upload_to_s3(url, s3_bucket, s3_key, max_retries=5, backoff_factor=0.5):
    """
    Downloads a file from a URL and uploads it to S3 bucket using multipart upload.
    Dynamically calculates chunk sizes based on file size or uses a fallback chunk size.
    
    :param url: URL of the file to download.
    :param s3_bucket: The target S3 bucket name.
    :param s3_key: The key (path) for the file in the S3 bucket.
    :param max_retries: Maximum retries for failed uploads.
    :param backoff_factor: Exponential backoff factor for retries.
    :return: Tuple with S3 bucket and key, or None if failed.
    """
    s3_client = boto3.client('s3')

    try:
        # Make a HEAD request to get file size
        head_response = requests.head(url, timeout=30)
        file_size = int(head_response.headers.get('Content-Length', 0))

        if file_size == 0:
            print("Warning: Failed to determine file size from URL. Defaulting to larger chunk sizes.")
            # If file size is unknown, set an arbitrary large chunk size
            chunk_size = 100 * 1024 * 1024  # 100 MB
        else:
            print(f"File size: {file_size / (1024 * 1024)} MB")

            # Calculate optimal chunk size to avoid exceeding 10,000 parts
            max_parts = 10_000
            min_part_size = 5 * 1024 * 1024  # 5MB minimum S3 part size
            chunk_size = max(min_part_size, math.ceil(file_size / max_parts))

        print(f"Using chunk size: {chunk_size / (1024 * 1024)} MB")

        # Start multipart upload on S3
        multipart_upload = s3_client.create_multipart_upload(Bucket=s3_bucket, Key=s3_key)
        upload_id = multipart_upload['UploadId']
        print(f"Multipart upload initiated with ID: {upload_id}")

        parts = []
        part_number = 1
        bytes_uploaded = 0

        # Start streaming the file in chunks
        with requests.get(url, stream=True, timeout=60) as response:
            response.raise_for_status()

            for chunk in response.iter_content(chunk_size=chunk_size):
                if chunk:
                    print(f"Uploading part {part_number}...")

                    # Retry logic for each part
                    for retry in range(max_retries):
                        try:
                            part = s3_client.upload_part(
                                Bucket=s3_bucket,
                                Key=s3_key,
                                PartNumber=part_number,
                                UploadId=upload_id,
                                Body=chunk
                            )

                            parts.append({
                                'ETag': part['ETag'],
                                'PartNumber': part_number
                            })

                            # Track progress
                            part_number += 1
                            bytes_uploaded += len(chunk)
                            print(f"Uploaded {bytes_uploaded / (1024 * 1024)} MB so far...")

                            # If we exceed 10,000 parts, fail early
                            if part_number > 10_000:
                                raise Exception("Exceeded S3's 10,000 part limit. Aborting upload.")
                            break

                        except (requests.exceptions.RequestException, NoCredentialsError, PartialCredentialsError) as e:
                            print(f"Error uploading part {part_number}, retrying: {e}")
                            time.sleep(backoff_factor * (2 ** retry))
                            if retry == max_retries - 1:
                                raise e  # Raise exception after max retries

        # Complete the multipart upload
        s3_client.complete_multipart_upload(
            Bucket=s3_bucket,
            Key=s3_key,
            UploadId=upload_id,
            MultipartUpload={'Parts': parts}
        )
        print(f"Multipart upload completed for {s3_key}. Total bytes uploaded: {bytes_uploaded}.")
        return s3_bucket, s3_key

    except (requests.exceptions.RequestException, NoCredentialsError, PartialCredentialsError, Exception) as e:
        print(f"Error: {e}")
        if 'upload_id' in locals():
            s3_client.abort_multipart_upload(Bucket=s3_bucket, Key=s3_key, UploadId=upload_id)
            print(f"Multipart upload aborted for {s3_key}.")
        return None


# Example usage
bucket, key = download_and_upload_to_s3(
    url="https://example.com/path/to/large/ova/file.ova",  # Replace with the actual URL
    s3_bucket="your-s3-bucket-name",  # Replace with your S3 bucket
    s3_key="uploads/large-file.ova"  # Replace with your S3 object key (file path in bucket)
)

if bucket and key:
    print(f"File successfully uploaded to s3://{bucket}/{key}")
