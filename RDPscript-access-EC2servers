Import-Module AWSPowerShell

$env:path += ";c:\program Files\Amazon\AWSCLIv2"

# Configure AWS credentials
$accesskey = ""
$secretKey = ""

# Function to fetch EC2 instances by tag key and value
function Get-EC2InstanceByTag ($region, $tagKey, $tagValue) {
    $instances = Get-EC2Instance -Region $region -ProfileName "ABC-Access" | Where-Object {
        $_.Instances.Tags | Where-Object { $_.Key -eq $tagKey -and $_.Value -eq $tagValue }
    }
    return $instances
}

# Function to display instances and allow the user to select one
function Select-EC2Instances ($instances) {
    $instanceOptions = @()

    foreach ($instance in $instances) {
        $instanceId = $instance.Instances.InstanceId
        $nameTag = ($instance.Instances.Tags | Where-Object { $_.Key -eq 'Name' }).Value
        $instanceOptions += [PSCustomObject]@{
            Name = $nameTag
            InstanceId = $instanceId
        }
    }

    if ($instanceOptions.Count -eq 0) {
        Write-Host "No EC2 instances found with the specified tag key and value"
        Exit
    }

    # Display instances for selection with a number
    Write-Host "Instances found with partner tag:"
    for ($i = 0; $i -lt $instanceOptions.Count; $i++) {
        Write-Host "[$i] $($instanceOptions[$i].Name) - Instance ID: $($instanceOptions[$i].InstanceId)"
    }

    return $instanceOptions
}

# Function to start the SSM session with port forwarding for RDP
function Start-SSMSessionForInstances ($instanceOptions, $region, $accessKey, $secretKey) {
    for ($i = 0; $i -lt $instanceOptions.Count; $i++) {
        $instance = $instanceOptions[$i]
        $localPort = 9999 + $i

        Write-Host "`nStarting SSM session for instance: $($instance.Name) on local port $localPort"

        $sessionIdCommand = "aws configure set aws_access_key_id $accessKey"
        Invoke-Expression -Command $sessionIdCommand

        $sessionKeyCommand = "aws configure set aws_secret_access_key $secretKey"
        Invoke-Expression -Command $sessionKeyCommand

        $sessionRegionCommand = "aws configure set region $region"
        Invoke-Expression -Command $sessionRegionCommand

        $sessionCommand = "aws ssm start-session --target $($instance.InstanceId) --document-name AWS-StartPortForwardingSession --parameters portNumber=3389,localPortNumber=$localPort --region $region"
        $sessionProcess = Start-Process -FilePath "powershell" -ArgumentList $sessionCommand -NoNewWindow -PassThru

        Write-Host "`nSession started with SessionId for instance: $($instance.InstanceId) on port $localPort"

        # Pause to avoid overlapping output
        Start-Sleep -Seconds 2
    }
}

# Function to generate RDP files for all instances
function Generate-RDPFiles ($instanceOptions) {
    $currentPath = Get-Location

    foreach ($instance in $instanceOptions) {
        $localPort = 9999 + $instanceOptions.IndexOf($instance)

        $rdpFileContent = @"
full address:s:localhost:$localPort
prompt for credentials:i:1
administrative session:i:1
screen mode id:i:2
"@

        $rdpFilePath = "$currentPath\SSM_RDP_$($instance.Name).rdp"
        Set-Content -Path $rdpFilePath -Value $rdpFileContent
        Write-Host "`nRDP file generated for $($instance.Name) at: $rdpFilePath"
    }
}

# Main Execution

# Step 1: Set AWS Credentials
$region = "af-south-1"

# Set AWS Credentials
Set-AWSCredential -AccessKey $accesskey -SecretKey $secretKey -StoreAs "ABC-Access"
Set-DefaultAWSRegion -Region $region

# Step 2: Get the IAM User
$iamUser = Get-IAMUser -ProfileName "ABC-Access"

# Step 3: Get the partner tag from the IAM User
$partnerTagValue = $iamUser.UserName.Substring(0, $iamUser.UserName.LastIndexOf('_'))
Write-Host "Partner Tag Value: $partnerTagValue"

# Step 4: Fetch EC2 instances using the partner tag
$tagKey = "partner"
$instances = Get-EC2InstanceByTag -region $region -tagKey $tagKey -tagValue $partnerTagValue

# Step 5: Display the instances to the user
$instanceOptions = Select-EC2Instances -instances $instances

# Step 6: Generate RDP files for all instances
Generate-RDPFiles -instanceOptions $instanceOptions

# Step 7: Start SSM session on all instances in parallel
Start-SSMSessionForInstances -instanceOptions $instanceOptions -region $region -accessKey $accesskey -secretKey $secretKey
