Import-Module AWSPowerShell

# IAM credentials (ensure they are securely stored)
$accesskey = "your-access-key-here"
$secretKey = "your-secret-key-here"
$region = "af-south-1"

# Set AWS Credentials
Set-AWSCredential -AccessKey $accesskey -SecretKey $secretKey -StoreAs "ABC-Access"
Set-DefaultAWSRegion -Region $region

# Function to fetch EC2 instances by tag key and value
function Get-EC2InstanceByTag ($region, $tagKey, $tagValue) {
    $instances = Get-EC2Instance -Region $region -ProfileName "ABC-Access" | Where-Object {
        $_.Instances.Tags | Where-Object { $_.Key -eq $tagKey -and $_.Value -eq $tagValue }
    }
    return $instances  
}

# Function to generate an RDP file
function Generate-RDPFile ($instanceName, $localPort) {
    $rdpFileContent = @"
full address:s:localhost:$localPort
prompt for credentials:i:1
administrative session:i:1
screen mode id:i:2
"@

    $currentPath = Get-Location # Get the current working directory
    $rdpFilePath = "$currentPath\SSM_RDP_$($instanceName).rdp"
    Write-Host "RDP file will be saved at: $rdpFilePath"
    Set-Content -path $rdpFilePath -Value $rdpFileContent
    Write-Host "RDP file generated at $rdpFilePath"
}

# Function to start the SSM session with port forwarding for RDP in the same session
function Start-SSMSessionForInstance ($instanceId, $region, $localPort) {
    # Start the port forwarding session
    $sessionCommand = "aws ssm start-session --target $instanceId --document-name AWS-StartPortForwardingSession --parameters portNumber=3389,localPortNumber=$localPort --region $region"
    $ssmProcess = Start-Process powershell -NoNewWindow -ArgumentList "-Command $sessionCommand" -PassThru
    Write-Host "SSM Session started for instance: $instanceId on local port $localPort"
    return $ssmProcess
}

# Main Execution
# Step 1: Get the IAM User
$iamUser = Get-IAMUser -ProfileName "ABC-Access"

# Step 2: Get the partner Tag from IAM policy
$partnerTagValue = $iamUser.UserName.Substring(0, $iamUser.UserName.LastIndexOf('_'))
Write-Host "Partner: $partnerTagValue"

# Step 3: Fetch EC2 instances using the partner tag
$tagKey = "partner"
$instances = Get-EC2InstanceByTag -region $region -tagKey $tagKey -tagValue $partnerTagValue

if ($instances.Count -eq 0) {
    Write-Host "No EC2 instances found with the specified partner tag"
    Exit
}

# Step 4: Loop through all instances, generate RDP files, and start SSM sessions
$startingPort = 9999
$ssmProcesses = @()

Write-Host "Tagged EC2 Instances for Partner $partnerTagValue:"
foreach ($instance in $instances) {
    $instanceId = $instance.Instances.InstanceId
    $instanceName = ($instance.Instances.Tags | Where-Object { $_.Key -eq 'Name' }).Value
    
    Write-Host "Instance Name: $instanceName - Instance ID: $instanceId"

    # Generate RDP file
    Generate-RDPFile -instanceName $instanceName -localPort $startingPort
    
    # Start SSM session (keep it in the same session, no new window)
    $ssmProcesses += Start-SSMSessionForInstance -instanceId $instanceId -region $region -localPort $startingPort
    
    # Increment port for next instance
    $startingPort++
}

# Wait for all SSM sessions to complete before exiting
foreach ($ssmProcess in $ssmProcesses) {
    $ssmProcess.WaitForExit()
}

Write-Host "RDP files have been generated for all instances, and SSM sessions have been started with incremented ports."
